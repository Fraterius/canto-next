== Canto Alpha ==

=== Requirements ===
- Typical Canto requirements
    - libncursesw5-dev
    - libncurses5-dev
    - python-dev
    - feedparser (system, not builtin in alpha yet)

=== Install ===

Untar canto-next and canto-curses tarballs. Inside
each directory:

    $ sudo python setup.py install

=== Notes ===

This alpha and original Canto should be capable of coexistence. The binaries for
this alpha are:

    - canto-daemon
    - canto-curses

And the default configuration is put at

    - ~/.canto-ng/*

=== First Run ===

Start canto-daemon

    $ canto-daemon

Wait a moment. Start canto-curses

    $ canto-curses

=== Configuration ===

Eventually, all configuration will be done through the interface itself, or via
a canto-remote command to provide a command line interface to the daemon and its
configuration abilities. For now though you're stuck hand-editing. After the
initial run, the configuration file's format (~/.canto-ng/conf) should be
evident (INI-style). Too add a feed, add a heading like this:

[Feed Feedname]
url = http:///whatever
order = #
rate = #

Other settings are sparse at the moment, however the following might be
interesting:

[CantoCurses]
browser = /some/path %%u

[defaults]
rate = #
global_transform = filter_read

To get decent browser behavior and show_unread like filtering.

After all configuration changes, you must restarts the daemon. Again this will
be handled by a remote in the future, but for now ^C will have to do, or
`killall -INT canto-daemon` if you've backgrounded it.

=== Logging ===

Currently, the daemon's logs are *extremely* verbose and can break into the 100M
/ 6hr range. Fortunately it compresses pretty well (90%). Anyway, if you don't
have the disk space to burn, you can delete it and it won't be regenerated until
another daemon is started... of course if you run into a bug that can't be
reproduced at that point, you're SOL.

=== Curses Interface Keybinds ===

These should be familiar and are not configurable at this point.

Up / Down : move selection
PgUp/PgDn : duh
'g' : goto current item(s) in browser
Space : open/close reader
'q' : quit
'e' : enumerate items
'E' : enumerate tags
'u' : tag unread
'U' : all unread
'r' : tag read
'R' : all read
':' : command line

=== Fun Stuff ===

Without making a selection (currently only in freshly opened client) hit 'g' for
goto, it will enumerate the items and ask you which you'd like to open. This
supports specifications like:

    *       - Goto all items
    1       - Goto item 1 
    1, 2    - Goto items 1 and 2 
    1 2     - Goto items 1 and 2
    1-13    - Goto items 1 through 13

Similarly, command line functions like 'tag-state' and 'item-state' will
enumerate tags/items and prompt you for a state (try 'read', '-read' since
they're the only things that actually cause different display).

=== Curses Interface Update ===

The only way to update the interface is to restart.

=== Limitations ===

- Reader is only basic, doesn't even do scroll.

- Layout is done totally dynamically, but the default layout is very basic, so
  you get behavior like the reader splitting vertically when the whole terminal
  is only 20 characters wide and some such. This will be improved.

- Configuration is minimal and done by hand

=== Things to Watch For ===

- Opening reader and getting "Waiting for content..." forever. The daemon should
  be pinning all items given to client to disk, so this shouldn't happen. I
  mention it here because the pinning is still relatively recent and is
  extremely important.

=== Known Bugs ===

- Sometimes browsers don't like being invoked 60 times in less than a minute
  when opening 60 different links in a batch.

- Some keys have different semantics when used with a selection versus without.
  Canto-curses is kind of modal in this way, but the distinction is not fully
  made yet.

Send me reports at jack@codezen.org, with ~/.canto-ng/*-log
(curses-log and daemon-log) attached or posted some place with a description of
what happened if it's tied to a particular set of actions.
